# # app.py

# import streamlit as st
# import pandas as pd
# from chatbot import answer_fare_question
# # import genai

# # genai.configure(api_key="YOUR_GEMINI_API_KEY")

# st.set_page_config(page_title="RidePal - GenAI Assistant")

# st.title("ðŸš• RidePal: Your AI Ride Assistant")

# df = pd.read_csv("data/rides.csv")

# st.subheader("Your Ride History")
# st.dataframe(df)

# question = st.text_input("Ask a question about your ride (e.g., Why was my fare so high yesterday?)")

# if question:
#     with st.spinner("Thinking..."):
#         answer = answer_fare_question(question, df)
#     st.success(answer)
# else:
#     st.info("Type your question above to get started!")

# from flask import Flask, request, jsonify
# import google.generativeai as genai
# import traceback
# from flask_cors import CORS
# from utils.get_recent_fare_context import get_recent_fare_context


# app = Flask(__name__)
# CORS(app)  # ðŸ”¥ This allows frontend from different origin (like localhost:3000)

# # âœ… Secure API key setup (ideally from env vars, but for now inline)
# genai.configure(api_key="AIzaSyC0KO-ZpXYWly-8crZqCklccsseRUJl2ik")

# # âœ… Use Gemini model
# model = genai.GenerativeModel("models/gemini-1.5-flash-001")

# @app.route("/chat", methods=["POST"])
# def chat():
#     try:
#         data = request.get_json()
#         prompt = data.get("prompt", "").strip()
#         print(f"Received prompt: {prompt}")

#         if not prompt:
#             return jsonify({"response": "No prompt provided"}), 400

#         # âœ… Generate response
#         response = model.generate_content(prompt)

#         # âœ… Make sure we get text
#         generated_text = response.text if hasattr(response, 'text') else str(response)
#         print("Generated:", generated_text)

#         return jsonify({"response": generated_text})

#     except Exception as e:
#         print("ðŸ”¥ ERROR IN /chat ðŸ”¥")
#         traceback.print_exc()
#         return jsonify({"response": f"Server error: {str(e)}"}), 500

# if __name__ == "__main__":
#     app.run(debug=True, port=5000)
